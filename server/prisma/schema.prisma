// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//user model - stores  user info
model User {
  id           String         @id @default(uuid())
  email        String         @unique
  password     String?
  googleId     String?        @unique
  name         String?        //full name
  displayName  String?        //display name for dashboard
  hasSeenWelcome Boolean      @default(false)

  phone          String?        // NEW optional phone number
  avatarUrl      String?        // NEW profile photo URL


  darkMode       Boolean  @default(false)
  dailyReminders Boolean  @default(false)
  privateJournal Boolean  @default(false)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  //bidirectional relationship
  journalEntries JournalEntry[]
  habits         Habit[]
  plantGrowths    PlantGrowth[]
  habitLogs      HabitLog[]
  moodLogs       MoodLog[]
}

//JournalEntry model - stores daily journal entries
model JournalEntry {
  id        String   @id @default(uuid())
  title     String   @default("Untitled Entry")
  content   String
  journalMood  Int?     // 0-5 scale for emoji, not tied to MoodLog
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  //Relationships
  userId String
  user   User   @relation(fields: [userId], references: [id])

}


model MoodLog {
  id        String   @id @default(uuid())
  mood      Int
  note      String?  // user’s optional guided response
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
}


//Habit model - tracks daily habits
model Habit {
  id          String   @id @default(uuid())
  title       String
  description String?
  streak      Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  //Relationships
  userId String
  user   User   @relation(fields: [userId], references: [id])
  logs        HabitLog[]

}

// HABIT LOG MODEL
model HabitLog {
  id        String   @id @default(uuid())
  date      DateTime
  completed Boolean  @default(false)

  habitId   String
  habit     Habit    @relation(fields: [habitId], references: [id])

  userId    String
  user      User     @relation(fields: [userId], references: [id])
}


//PLANT GROWTH MODEL
model PlantGrowth {
  id        String   @id @default(uuid())
  level     Int      @default(0) // ranges 0–5
  lastGrowthDate DateTime?             // date when plant last grew
  updatedAt DateTime @updatedAt

  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
}
